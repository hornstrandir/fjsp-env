import unittest
from pathlib import Path
from fjsp_env.envs.fjsp_env import FJSPEnv

class TestSolution(unittest.TestCase):
    def test_optimum_ta01(self):
        # http://optimizizer.com/solution.php?name=ta01&UB=1231&problemclass=ta
        env = FJSPEnv(
            env_config={
                "instance_path": f"{str(Path(__file__).parents[1].absolute())}/fjsp_env/envs/taillard_instances_preprocessed/ta01"
            },
        )
        env.reset()
        self.assertEqual(env.current_time_step, 0)
        #print(env.instance_map.items())
        # for every machine give the jobs to process in order for every machine
        solution_sequence = [
            [7, 11, 9, 10, 8, 3, 12, 2, 14, 5, 1, 6, 4, 0, 13],
            [2, 8, 7, 14, 6, 13, 9, 11, 4, 5, 12, 3, 10, 1, 0],
            [11, 9, 3, 0, 4, 12, 8, 7, 5, 2, 6, 14, 13, 10, 1],
            [6, 5, 0, 9, 12, 7, 11, 10, 14, 1, 13, 2, 3, 4, 8],
            [10, 13, 0, 4, 1, 5, 14, 3, 7, 6, 12, 8, 2, 9, 11], 
            [5, 7, 3, 12, 13, 10, 1, 11, 8, 4, 2, 6, 0, 9, 14], 
            [9, 0, 4, 8, 3, 11, 13, 14, 6, 12, 10, 2, 1, 7, 5], 
            [4, 6, 7, 10, 0, 11, 1, 9, 3, 5, 13, 14, 8, 2, 12],
            [13, 4, 6, 2, 9, 14, 12, 11, 7, 10, 0, 1, 3, 8, 5],
            [9, 3, 2, 4, 13, 11, 12, 1, 0, 7, 8, 5, 14, 10, 6],
            [8, 14, 4, 3, 11, 12, 9, 0, 10, 13, 5, 1, 6, 2, 7],
            [7, 9, 8, 5, 6, 0, 2, 3, 1, 13, 14, 12, 4, 10, 11],
            [6, 0, 7, 11, 5, 14, 10, 2, 4, 13, 8, 9, 3, 12, 1],
            [13, 10, 7, 9, 5, 3, 11, 1, 12, 14, 2, 4, 0, 6, 8],
            [13, 11, 6, 8, 7, 4, 1, 5, 3, 10, 0, 14, 9, 2, 12],
        ]
        done = False
        job_nb = len(solution_sequence[0])
        machine_nb = len(solution_sequence)
        index_machine = [0 for _ in range(machine_nb)]
        step_nb = 0
        while not done:
            # if we haven't performed any action, we go to the next time step
            no_op = True
            for machine in range(len(solution_sequence)):
                print(f": legal machines: {env.machine_legal}")
                if done:
                    break
                if env.machine_legal[machine] and index_machine[machine] < job_nb:
                    action_to_do = solution_sequence[machine][index_machine[machine]]
                    if (
                        env.needed_machine_operation[action_to_do] == machine
                        and env.legal_actions[action_to_do]
                    ):
                        no_op = False
                        self.assertTrue(
                            env.legal_actions[action_to_do],
                            "We don't perform illegal actions",
                        )
                        self.assertEqual(
                            sum(env.legal_actions[:-1]), env.nb_legal_actions
                        )
                        state, reward, done, _ = env.step(action_to_do)
                        print(f"done step: {action_to_do}, at machine: {machine}")
                        print(f"legal machines: {env.machine_legal}, jobs legal: {env.legal_jobs}")
                        print(f"needed machines: {env.needed_machine_operation}")
                        print(f"nb machine legal: {env.nb_machine_legal}")
                        print(f"at time step: {env.current_time_step}, next time steps: {env.next_time_step}")
                        index_machine[machine] += 1
                        step_nb += 1
            if no_op and not done:
                print(f"at time step: {env.current_time_step}, next time steps: {env.next_time_step}")

                self.assertTrue(len(env.next_time_step) > 0, f"step {step_nb}")
                previous_time_step = env.current_time_step
                env.increase_time_step()
                self.assertTrue(
                    env.current_time_step > previous_time_step,
                    "we increase the time step",
                )
        self.assertEqual(
            sum(index_machine), len(solution_sequence) * len(solution_sequence[0])
        )
        self.assertEqual(env.current_time_step, 1231)
        env.reset()
        self.assertEqual(env.current_time_step, 0)

"""
    def test_optimum_ta41(self):
        # http://optimizizer.com/solution.php?name=ta41&UB=2006&problemclass=ta
        env = FJSPEnv(
            env_config={
                "instance_path": f"{str(Path(__file__).parents[1].absolute())}/fjsp_env/envs/taillard_instances_preprocessed/ta41"
            },
        )
        env.reset()
        self.assertEqual(env.current_time_step, 0)
        # for every machine give the jobs to process in order for every machine
        solution_sequence = [
            [
                9,
                21,
                27,
                23,
                5,
                8,
                10,
                11,
                3,
                16,
                1,
                19,
                13,
                24,
                17,
                18,
                2,
                15,
                25,
                22,
                28,
                6,
                29,
                20,
                0,
                26,
                14,
                7,
                4,
                12,
            ],
            [
                5,
                10,
                22,
                25,
                18,
                14,
                26,
                1,
                17,
                12,
                9,
                29,
                15,
                13,
                16,
                4,
                21,
                11,
                8,
                2,
                24,
                6,
                20,
                7,
                0,
                23,
                3,
                27,
                19,
                28,
            ],
            [
                6,
                9,
                1,
                20,
                4,
                26,
                12,
                5,
                11,
                2,
                8,
                21,
                16,
                29,
                17,
                13,
                15,
                7,
                24,
                0,
                25,
                22,
                27,
                23,
                19,
                3,
                18,
                28,
                14,
                10,
            ],
            [
                6,
                8,
                9,
                17,
                13,
                21,
                15,
                1,
                29,
                18,
                11,
                12,
                0,
                3,
                7,
                4,
                2,
                20,
                28,
                23,
                27,
                5,
                14,
                19,
                25,
                26,
                24,
                16,
                10,
                22,
            ],
            [
                14,
                15,
                22,
                10,
                1,
                13,
                19,
                12,
                7,
                5,
                4,
                9,
                2,
                26,
                16,
                3,
                28,
                0,
                29,
                8,
                21,
                11,
                24,
                20,
                23,
                18,
                25,
                27,
                6,
                17,
            ],
            [
                11,
                22,
                12,
                23,
                0,
                2,
                1,
                17,
                5,
                15,
                16,
                26,
                14,
                18,
                4,
                21,
                19,
                9,
                25,
                29,
                3,
                24,
                13,
                20,
                27,
                6,
                8,
                7,
                28,
                10,
            ],
            [
                11,
                4,
                24,
                17,
                22,
                20,
                21,
                1,
                19,
                29,
                12,
                9,
                5,
                14,
                0,
                18,
                8,
                3,
                15,
                2,
                28,
                25,
                7,
                10,
                13,
                23,
                16,
                27,
                26,
                6,
            ],
            [
                21,
                20,
                19,
                8,
                17,
                1,
                26,
                11,
                22,
                5,
                16,
                3,
                18,
                25,
                4,
                24,
                2,
                0,
                29,
                7,
                12,
                14,
                28,
                9,
                23,
                27,
                6,
                13,
                10,
                15,
            ],
            [
                4,
                2,
                19,
                14,
                3,
                9,
                27,
                1,
                13,
                15,
                22,
                5,
                11,
                21,
                16,
                6,
                7,
                26,
                0,
                28,
                17,
                24,
                10,
                20,
                25,
                29,
                12,
                18,
                8,
                23,
            ],
            [
                18,
                15,
                17,
                11,
                9,
                22,
                1,
                13,
                26,
                14,
                28,
                29,
                27,
                4,
                21,
                19,
                0,
                25,
                6,
                24,
                23,
                20,
                7,
                10,
                12,
                3,
                16,
                5,
                2,
                8,
            ],
            [
                22,
                8,
                5,
                13,
                16,
                11,
                25,
                26,
                7,
                6,
                14,
                21,
                18,
                10,
                9,
                12,
                24,
                0,
                1,
                19,
                23,
                4,
                15,
                27,
                3,
                2,
                28,
                20,
                17,
                29,
            ],
            [
                24,
                18,
                12,
                28,
                14,
                26,
                22,
                4,
                3,
                23,
                11,
                15,
                16,
                8,
                29,
                13,
                7,
                2,
                19,
                10,
                21,
                27,
                5,
                6,
                0,
                17,
                20,
                25,
                1,
                9,
            ],
            [
                7,
                21,
                1,
                22,
                25,
                9,
                5,
                16,
                4,
                11,
                27,
                20,
                6,
                12,
                13,
                0,
                15,
                17,
                19,
                14,
                29,
                2,
                23,
                24,
                28,
                8,
                10,
                26,
                3,
                18,
            ],
            [
                1,
                5,
                12,
                17,
                3,
                19,
                25,
                4,
                16,
                18,
                0,
                22,
                9,
                11,
                6,
                26,
                21,
                14,
                7,
                10,
                27,
                28,
                8,
                23,
                15,
                24,
                29,
                13,
                2,
                20,
            ],
            [
                23,
                8,
                14,
                26,
                24,
                12,
                1,
                16,
                17,
                2,
                15,
                3,
                28,
                11,
                20,
                0,
                5,
                22,
                7,
                10,
                6,
                19,
                25,
                29,
                21,
                13,
                18,
                9,
                4,
                27,
            ],
            [
                1,
                14,
                12,
                15,
                4,
                26,
                17,
                6,
                5,
                0,
                9,
                10,
                27,
                13,
                21,
                23,
                16,
                28,
                7,
                19,
                29,
                2,
                3,
                24,
                18,
                11,
                8,
                20,
                22,
                25,
            ],
            [
                29,
                21,
                6,
                20,
                4,
                24,
                17,
                26,
                9,
                15,
                5,
                18,
                14,
                16,
                19,
                27,
                8,
                11,
                28,
                10,
                2,
                25,
                0,
                13,
                7,
                12,
                1,
                23,
                22,
                3,
            ],
            [
                20,
                19,
                16,
                18,
                17,
                8,
                6,
                15,
                13,
                7,
                5,
                2,
                14,
                24,
                27,
                4,
                22,
                11,
                9,
                21,
                25,
                23,
                1,
                0,
                10,
                3,
                12,
                28,
                26,
                29,
            ],
            [
                22,
                28,
                15,
                25,
                24,
                27,
                2,
                16,
                5,
                17,
                29,
                21,
                14,
                19,
                3,
                13,
                12,
                6,
                20,
                8,
                1,
                4,
                7,
                23,
                26,
                18,
                11,
                0,
                10,
                9,
            ],
            [
                17,
                12,
                15,
                26,
                16,
                8,
                21,
                5,
                1,
                13,
                4,
                0,
                9,
                11,
                27,
                6,
                7,
                23,
                14,
                3,
                10,
                24,
                19,
                22,
                20,
                2,
                28,
                29,
                18,
                25,
            ],
        ]
        done = False
        machine_nb = len(solution_sequence)
        job_nb = len(solution_sequence[0])
        index_machine = [0 for _ in range(machine_nb)]
        step_nb = 0
        while not done:
            # if we haven't performed any action, we go to the next time step
            no_op = True
            for machine in range(len(solution_sequence)):
                if done:
                    break
                if env.machine_legal[machine] and index_machine[machine] < job_nb:
                    action_to_do = solution_sequence[machine][index_machine[machine]]
                    if (
                        env.needed_machine_operation[action_to_do] == machine
                        and env.legal_actions[action_to_do]
                    ):
                        no_op = False
                        self.assertTrue(
                            env.legal_actions[action_to_do],
                            "We don't perform illegal actions",
                        )
                        self.assertEqual(
                            sum(env.legal_actions[:-1]), env.nb_legal_actions
                        )
                        state, reward, done, _ = env.step(action_to_do)
                        index_machine[machine] += 1
                        step_nb += 1
            if no_op and not done:
                self.assertTrue(len(env.next_time_step) > 0, "step {}".format(step_nb))
                previous_time_step = env.current_time_step
                state, reward, done, _ = env.step(env.jobs)
                self.assertTrue(
                    env.current_time_step > previous_time_step,
                    "we increase the time step",
                )
        self.assertEqual(
            sum(index_machine), len(solution_sequence) * len(solution_sequence[0])
        )
        self.assertEqual(env.current_time_step, 2006)
        env.reset()
        self.assertEqual(env.current_time_step, 0)


if __name__ == '__main__':
    unittest.main()

    """